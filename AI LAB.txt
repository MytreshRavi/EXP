


ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ 
 

MIN MAX

 
MAX, MIN = 1000, -1000
def minimax(depth, nodeIndex, maximizingPlayer,values, alpha, beta):
    if depth == 3:
        return values[nodeIndex]
    if maximizingPlayer:
        best = MIN
        for i in range(0, 2):
            val = minimax(depth + 1, nodeIndex * 2 + i,False, values, alpha, beta)
            best = max(best, val)
            alpha = max(alpha, best)
            if beta <= alpha:
                break
        return best



    else:
        best = MAX
        for i in range(0, 2):
            val = minimax(depth + 1, nodeIndex * 2 + i,True, values, alpha, beta)
            best = min(best, val)
            beta = min(beta, best)
            if beta <= alpha:
                break
        return best


if _name_ == "_main_":
    values = []
    for i in range(0, 8):
        x = int(input(f"Enter Value {i} :"))
        values.append(x)
    print ("The optimal value is :", minimax(0, 0, True, values, MIN, MAX))

ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ 

TOY PROBLEM SELLING MOVIE TICKET 



def maxAmount(M, N, seats):
    q = []
    for i in range(M):
        q.append(seats[i])
    ticketSold = 0
    ans = 0
    q.sort(reverse = True)
    while (ticketSold < N and q[0] > 0):
        ans = ans + q[0]
        temp = q[0]
        q = q[1:]
        q.append(temp - 1)
        q.sort(reverse = True)
        ticketSold += 1
    return ans


if _name_ == "_main_":
    seats = []
    rows = int(input("Enter number of rows available :"))
    for i in range(0, rows):
        empty = int(input())
        seats.append(empty)
print(seats)
M = len(seats)
N = int(input("Enter the number of People standing in the queue :"))
print("Maximum Profit generated = ", maxAmount(N, M, seats))


output:
Enter number of rows available :4
2
3
5
3
[2, 3, 5, 3]
Enter the number of People standing in the queue :4
Maximum Profit generated =  15

ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ 

GRAPH COLORING 


class Graph:
      def __init__ (self, edges, N):
        self.adj = [[] for __ in range(N)] 
        for (src, dest) in edges:
          self.adj[src].append(dest) 
          self.adj[dest].append(src)

def colorGraph(graph):
    result = {}
    for u in range(N):
      assigned = set([result.get(i) for i in graph.adj[u] if i in result]) 
      color = 1
      for c in assigned:
        if color != c:
            break
        color = color + 1 
      result[u] = color
    for v in range(N):
        print("color assigned to vertex", v, "is",colors[result[v]])
    print("\n")
    for v in range(N):
        print("color assigned to Edge", v, "is",colors[result[v]+3])

if __name__ == '__main__':
    colors= ["", "YELLOW", "RED", "BLUE", "ORANGE", "GREEN", "PINK", "BLACK", "BROWN", "WHITE", "PURPLE", "VIOLET"]
    edges = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5),(5,6), (6,0)]
    N = 7
    graph = Graph(edges, N) 
    colorGraph(graph)

ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ 

CRYPTARITHMETIC PROBLEM 



import itertools
import pdb
def get_val(word, substitution):
    s = 0
    factor = 1
    for let in reversed(word):
        s += factor * substitution[let]
        factor *= 10
    return s
def solve(equation):
    l, r = equation.lower().replace(' ', '').split('=')
    print(l,r)
    l = l.split('+')
    print(l)
    lets = set(r)
    print(lets)
    for word in l:
        for let in word:
            lets.add(let)
    lets = list(lets)
    print(lets)
    digits = range(15)
    for perm in itertools.permutations(digits, len(lets)):
        sol = dict(zip(lets, perm))
 
        if sum(get_val(word, sol) for word in l) == get_val(r, sol):
            print(' + '.join(str(get_val(word, sol)) for word in l) + " = ",get_val(r, sol))
            
            
equation = input("Enter:")
solve(equation)

// two+two=four

ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ 


DFS AND BFS 


BFS 


graph = {
  '5' : ['3','7'],
  '3' : ['2', '4'],
  '7' : ['8'],
  '2' : [],
  '4' : ['8'],
  '8' : []
}

visited = [] # List for visited nodes.
queue = []     #Initialize a queue

def bfs(visited, graph, node): #function for BFS
  visited.append(node)
  queue.append(node)

  while queue:          # Creating loop to visit each node
    m = queue.pop(0) 
    print (m, end = " ") 

    for neighbour in graph[m]:
      if neighbour not in visited:
        visited.append(neighbour)
        queue.append(neighbour)

# Driver Code
print("Following is the Breadth-First Search")
bfs(visited, graph, '5')    # function calling

ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ 

DFS 



# Using a Python dictionary to act as an adjacency list
graph = {
  '5' : ['3','7'],
  '3' : ['2', '4'],
  '7' : ['8'],
  '2' : [],
  '4' : ['8'],
  '8' : []
}

visited = set() # Set to keep track of visited nodes of graph.

def dfs(visited, graph, node):  
    if node not in visited:
        print (node)
        visited.add(node)
        for neighbour in graph[node]:
            dfs(visited, graph, neighbour)

# Driver Code
print("Following is the Depth-First Search")
dfs(visited, graph, '5')
ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ 

A*



class Graph:
    
    # init class
    def __init__(self, graph_dict=None, directed=True):
        self.graph_dict = graph_dict or {}
        self.directed = directed
        if not directed:
            self.make_undirected()

    # create undirected graph by adding symmetric edges
    def make_undirected(self):
        for a in list(self.graph_dict.keys()):
            for (b, dist) in self.graph_dict[a].items():
                self.graph_dict.setdefault(b, {})[a] = dist

    # add link from A and B of given distance, and also add the inverse link if the graph is undirected
    def connect(self, A, B, distance=1):
        self.graph_dict.setdefault(A, {})[B] = distance
        if not self.directed:
            self.graph_dict.setdefault(B, {})[A] = distance

    # get neighbors or a neighbor
    def get(self, a, b=None):
        links = self.graph_dict.setdefault(a, {})
        if b is None:
            return links
        else:
            return links.get(b)

    # return list of nodes in the graph
    def nodes(self):
        s1 = set([k for k in self.graph_dict.keys()])
        s2 = set([k2 for v in self.graph_dict.values() for k2, v2 in v.items()])
        nodes = s1.union(s2)
        return list(nodes)

# node class
class Node:

    # init class
    def __init__(self, name:str, parent:str):
        self.name = name
        self.parent = parent
        self.g = 0 # distance to start node
        self.h = 0 # distance to goal node
        self.f = 0 # total cost

    # compare nodes
    def __eq__(self, other):
        return self.name == other.name

    # sort nodes
    def __lt__(self, other):
         return self.f < other.f

    # print node
    def __repr__(self):
        return ('({0},{1})'.format(self.name, self.f))

# A* search
def astar_search(graph, heuristics, start, end):
    
    # lists for open nodes and closed nodes
    open = []
    closed = []

    # a start node and an goal node
    start_node = Node(start, None)
    goal_node = Node(end, None)

    # add start node
    open.append(start_node)
    
    # loop until the open list is empty
    while len(open) > 0:

       
        open.sort()                                 # sort open list to get the node with the lowest cost first
        current_node = open.pop(0)                  # get node with the lowest cost
        closed.append(current_node)                 # add current node to the closed list
        
        # check if we have reached the goal, return the path
        if current_node == goal_node:
            path = []
            while current_node != start_node:
                path.append(current_node.name + ': ' + str(current_node.g))
                current_node = current_node.parent
            path.append(start_node.name + ': ' + str(start_node.g))
            return path[::-1]

        
        neighbors = graph.get(current_node.name)    # get neighbours
        
        # loop neighbors
        for key, value in neighbors.items():
            neighbor = Node(key, current_node)      # create neighbor node
            if(neighbor in closed):                 # check if the neighbor is in the closed list
                continue

            # calculate full path cost
            neighbor.g = current_node.g + graph.get(current_node.name, neighbor.name)
            neighbor.h = heuristics.get(neighbor.name)
            neighbor.f = neighbor.g + neighbor.h

            # check if neighbor is in open list and if it has a lower f value
            if(add_to_open(open, neighbor) == True):

                # everything is green, add neighbor to open list
                open.append(neighbor)

    # return None, no path is found
    return None

# check if a neighbor should be added to open list
def add_to_open(open, neighbor):
    for node in open:
        if (neighbor == node and neighbor.f > node.f):
            return False
    return True

# create a graph
graph = Graph()
graph.connect('S', 'A', 2)
graph.connect('S', 'G', 20)
graph.connect('A', 'C', 7)
graph.connect('C', 'G', 8)
graph.connect('C', 'D', 9)
graph.connect('D', 'G', 10)
# make graph undirected, create symmetric connections
graph.make_undirected()
# create heuristics (straight-line distance, air-travel distance)
heuristics = {}
heuristics['A'] = 5
heuristics['C'] = 8
heuristics['G'] = 7
heuristics['D'] = 6
heuristics['S'] = 9
# run the search algorithm
path = astar_search(graph, heuristics, 'S', 'G')
print("Path:", path)

ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ 

BEST FIRST SEARCH 




from queue import PriorityQueue
v = 5
graph = [[] for i in range(v)]
def best_first_search(source, target, n):
  visited = [0] * n
  visited[0] = True
  pq = PriorityQueue()
  pq.put((0, source))
  while pq.empty() == False:
    u = pq.get()[1]
    print(u, end=" ")
    if u == target:
      break
    for v, c in graph[u]:
      if visited[v] == False:
        visited[v] = True
        pq.put((c, v))
  print()
def addedge(x, y, cost):
  graph[x].append((y, cost))
  graph[y].append((x, cost))
addedge(0, 1, 5)
addedge(0, 2, 1)
addedge(2, 3, 2)
addedge(1, 4, 1)
addedge(3, 4, 2)
source = 0
target = 4
best_first_search(source, target, v)

ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ 

MIN MAX ALGORITHM 



MAX, MIN = 1000, -1000 
def minimax(depth, nodeIndex, maximizingPlayer, 
			values, alpha, beta): 

	if depth == 3: 
		return values[nodeIndex] 

	if maximizingPlayer:                                                      #for maximizer player
	
		best = MIN

		for i in range(0, 2): 
			
			val = minimax(depth + 1, nodeIndex * 2 + i, 
						False, values, alpha, beta) 
			best = max(best, val)                                                #gives Maximum of the values  
			alpha = max(alpha, best) 

			if beta <= alpha: 
				break
		
		return best 


	
	else: 
		best = MAX
		for i in range(0, 2): 
		
			val = minimax(depth + 1, nodeIndex * 2 + i, 
							True, values, alpha, beta) 
			best = min(best, val) 
			beta = min(beta, best) 
			if beta <= alpha: 
				break
		
		return best 

if __name__ == "__main__": 

    values = []
    for i in range(0, 9):

        x = int(input(f"Enter Value {i}  : "))
        values.append(x)

    print ("The optimal value is :", minimax(0, 0, True, values, MIN, MAX))


ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ 

DRAW.PY



import random
from random import seed, randint
import numpy

def game(winningdoor, selecteddoor, change=False):
    assert winningdoor < 3
    assert winningdoor >= 0

    
    removeddoor = next(i for i in range(3) if i != selecteddoor and i != winningdoor)

  
    if change:
        selecteddoor = next(i for i in range(3) if i != selecteddoor and i != removeddoor)

   
    return selecteddoor == winningdoor


if __name__ == '__main__':
    playerdoors = numpy.random.random_integers(0,2,(1000*1000*1))

    winningdoors = [d for d in playerdoors if game(1, d)]
    print("Winning percentage without changing choice: ", len(winningdoors) / len(playerdoors))

    winningdoors = [d for d in playerdoors if game(1, d, change=True)]
    print("Winning percentage while changing choice: ", len(winningdoors) / len(playerdoors))

ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ 


TIP.PY



import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl

f_qual = int(input("Rate food ? [0-10] --- "))
s_qual = int(input("Waiter service ? [0-10] --- "))
a_qual = int(input("Rate the Ambience ? [0-10]---"))

quality = ctrl.Antecedent(np.arange(0, 11, 1), 'quality')
service = ctrl.Antecedent(np.arange(0, 11, 1), 'service')
ambience =ctrl.Antecedent(np.arange(0, 11, 1), 'ambience')

tip = ctrl.Consequent(np.arange(0, 26, 1), 'tip')

quality.automf(3)
service.automf(3)
ambience.automf(3)

tip['low'] = fuzz.trimf(tip.universe, [0, 0, 13])
tip['medium'] = fuzz.trimf(tip.universe, [0, 13, 25])
tip['high'] = fuzz.trimf(tip.universe, [13, 25, 25])

rule1 = ctrl.Rule(quality['poor'] | service['poor'], tip['low'])
rule2 = ctrl.Rule(service['average'], tip['medium'])
rule3 = ctrl.Rule(service['good'] | quality['good'], tip['high'])

tipping_ctrl = ctrl.ControlSystem([rule1, rule2, rule3])

tipping = ctrl.ControlSystemSimulation(tipping_ctrl)

tipping.input['quality'] = f_qual
tipping.input['service'] = s_qual
tipping.input['ambience'] =a_qual

tipping.compute()

print("You should Tip ", tipping.output['tip'])


ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ 

UNIFICATION AND RESOLUTION 




def get_index_comma(string):
    index_list = list()
    par_count = 0

    for i in range(len(string)):
        if string[i] == ',' and par_count == 0:
            index_list.append(i)
        elif string[i] == '(':
            par_count += 1
        elif string[i] == ')':
            par_count -= 1

    return index_list


def is_variable(expr):
    for i in expr:
        if i == '(' or i == ')':
            return False

    return True


def process_expression(expr):
    expr = expr.replace(' ', '')
    index = None
    for i in range(len(expr)):
        if expr[i] == '(':
            index = i
            break
    predicate_symbol = expr[:index]
    expr = expr.replace(predicate_symbol, '')
    expr = expr[1:len(expr) - 1]
    arg_list = list()
    indices = get_index_comma(expr)

    if len(indices) == 0:
        arg_list.append(expr)
    else:
        arg_list.append(expr[:indices[0]])
        for i, j in zip(indices, indices[1:]):
            arg_list.append(expr[i + 1:j])
        arg_list.append(expr[indices[len(indices) - 1] + 1:])

    return predicate_symbol, arg_list


def get_arg_list(expr):
    _, arg_list = process_expression(expr)

    flag = True
    while flag:
        flag = False

        for i in arg_list:
            if not is_variable(i):
                flag = True
                _, tmp = process_expression(i)
                for j in tmp:
                    if j not in arg_list:
                        arg_list.append(j)
                arg_list.remove(i)

    return arg_list


def check_occurs(var, expr):
    arg_list = get_arg_list(expr)
    if var in arg_list:
        return True

    return False


def unify(expr1, expr2):

    if is_variable(expr1) and is_variable(expr2):
        if expr1 == expr2:
            return 'Null'
        else:
            return False
    elif is_variable(expr1) and not is_variable(expr2):
        if check_occurs(expr1, expr2):
            return False
        else:
            tmp = str(expr2) + '/' + str(expr1)
            return tmp
    elif not is_variable(expr1) and is_variable(expr2):
        if check_occurs(expr2, expr1):
            return False
        else:
            tmp = str(expr1) + '/' + str(expr2)
            return tmp
    else:
        predicate_symbol_1, arg_list_1 = process_expression(expr1)
        predicate_symbol_2, arg_list_2 = process_expression(expr2)

        # Step 2
        if predicate_symbol_1 != predicate_symbol_2:
            return False
        # Step 3
        elif len(arg_list_1) != len(arg_list_2):
            return False
        else:
            # Step 4: Create substitution list
            sub_list = list()

            # Step 5:
            for i in range(len(arg_list_1)):
                tmp = unify(arg_list_1[i], arg_list_2[i])

                if not tmp:
                    return False
                elif tmp == 'Null':
                    pass
                else:
                    if type(tmp) == list:
                        for j in tmp:
                            sub_list.append(j)
                    else:
                        sub_list.append(tmp)

            # Step 6
            return sub_list


if __name__ == '__main__':
    
    f1 = 'Q(a, g(x, a), f(y))'
    f2 = 'Q(a, g(f(b), a), x)'
    # f1 = input('f1 : ')
    # f2 = input('f2 : ')

    result = unify(f1, f2)
    if not result:
        print('The process of Unification failed!')
    else:
        print('The process of Unification successful!')
        print(result)



ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ ğŸ˜’ 



GRAPH COLOURING 




import matplotlib.pyplot as plt 
import networkx as nx
G = nx.Graph()
colors = {0:"blue", 1:"green", 2:"red", 3:"yellow", 4:"orange", 5:"pink"}
G.add_nodes_from(["a","b","c","d","e","f"])
G.add_edges_from([("a","e"), ("a","b"), ("b","f"), ("f","e"), ("e","c"), ("b","d"), ("c","a"), ("c","f"), ("d","a"), ("d","f") ])
d = nx.coloring.greedy_color(G, strategy = "largest_first") 
node_colors = []
for i in sorted (d.keys()): node_colors.append(colors[d[i]])
nx.draw(G, node_color = node_colors, with_labels = True, width = 5) 
plt.show()




